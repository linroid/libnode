name: Build

on: 
  pull_request:
    paths-ignore:
      - README.md
      - .github/**
  workflow_dispatch:
  workflow_call:
env:
  NODE_VERSION: v16.14.0
  PYTHON_VERSION: '3.10'
  CACHE_VERSION: v1

jobs:
  Android:
    if: github.event.pull_request.draft == false
    strategy:
      matrix:
        arch: [arm64, arm, x64, x86]
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: Print all enviroments
      run: printenv
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install tools
      run: sudo apt-get install g++ gcc make gcc-multilib g++-multilib lib32z1 -y
    - uses: nttld/setup-ndk@v1
      id: setup-ndk
      with:
        ndk-version: r20b
    - name: Download Node.js tarball
      run: curl -O https://nodejs.org/dist/${{ env.NODE_VERSION }}/node-${{ env.NODE_VERSION }}.tar.gz
    - name: Extract Node.js tarball
      run: |
        tar -zxf ./node-${{ env.NODE_VERSION }}.tar.gz -C ./
        mv node-${{ env.NODE_VERSION }} node
        rm ./node-${{ env.NODE_VERSION }}.tar.gz
    - name: Apply common patches
      run: ./scripts/patch.sh apply -f
    - name: Checkout build cache
      uses: actions/cache@v2
      with:
        path: ./node/out
        key: node-out-android-${{ env.NODE_VERSION }}-${{ matrix.arch }}-${{ env.CACHE_VERSION }}
    - name: Build Node.js
      env:
        ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
      run: ./scripts/build_android.sh ${{ matrix.arch }}
    - uses: benjlevesque/short-sha@v1.2
      id: short-sha
      with:
        length: 7
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2.3.1
      with:
        name: libnode-${{ env.NODE_VERSION }}-${{ steps.short-sha.outputs.sha }}-android-${{ matrix.arch }}.zip
        path: ./artifacts/android/${{ matrix.arch }}

  macOS:
    runs-on: macos-latest
    if: github.event.pull_request.draft == false
    strategy:
      matrix:
        arch: [x64]
    steps:
      - uses: actions/checkout@v2
      - name: Print all enviroments
        run: printenv
      - name: Install tools
        run: brew install coreutils
      - name: Download Node.js tarball
        run: curl -O https://nodejs.org/dist/${{ env.NODE_VERSION }}/node-${{ env.NODE_VERSION }}.tar.gz
      - name: Extract Node.js tarball
        run: |
          tar -zxf ./node-${{ env.NODE_VERSION }}.tar.gz -C ./
          mv node-${{ env.NODE_VERSION }} node
          rm ./node-${{ env.NODE_VERSION }}.tar.gz
      - name: Apply common patches
        run: ./scripts/patch.sh apply -f
      # - name: Checkout build cache
      #   uses: actions/cache@v2
      #   with:
      #     path: ./node/out
      #     key: node-out-${{ runner.os }}-${{ env.NODE_VERSION }}-${{ matrix.arch }}-${{ env.CACHE_VERSION }}
      - name: Build Node.js
        run: ./scripts/build.sh
      - uses: benjlevesque/short-sha@v1.2
        id: short-sha
        with:
          length: 7
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2.3.1
        with:
          name: libnode-${{ env.NODE_VERSION }}-${{ steps.short-sha.outputs.sha }}-macos-${{ matrix.arch }}.zip
          path: ./artifacts/host

  Linux:
    runs-on: ubuntu-18.04
    if: github.event.pull_request.draft == false
    strategy:
      matrix:
        arch: [x64]
    steps:
      - uses: actions/checkout@v2
      - name: Print all enviroments
        run: printenv
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install tools
        run: sudo apt-get install g++ gcc make -y
        if: ${{ matrix.arch == 'x64' }}
      - name: Download Node.js tarball
        run: curl -O https://nodejs.org/dist/${{ env.NODE_VERSION }}/node-${{ env.NODE_VERSION }}.tar.gz
      - name: Extract Node.js tarball
        run: |
          tar -zxf ./node-${{ env.NODE_VERSION }}.tar.gz -C ./
          mv node-${{ env.NODE_VERSION }} node
          rm ./node-${{ env.NODE_VERSION }}.tar.gz
      - name: Apply common patches
        run: ./scripts/patch.sh apply -f
      # - name: Checkout build cache
      #   uses: actions/cache@v2
      #   with:
      #     path: ./node/out
      #     key: node-out-${{ runner.os }}-${{ env.NODE_VERSION }}-${{ matrix.arch }}-${{ env.CACHE_VERSION }}
      - name: Build Node.js (x64)
        if: ${{ matrix.arch == 'x64' }}
        run: ./scripts/build.sh
      # - uses: uraimo/run-on-arch-action@v2.1.1
      #   name: Build Node.js (arm64)
      #   if: ${{ matrix.arch == 'arm64' }}
      #   with:
      #     arch: aarch64
      #     distro: ubuntu18.04
      #     run: ./scripts/build.sh
      #     install: |
      #       apt-get update -q -y
      #       apt-get install g++ gcc make python3-pip python3-dev -y
      - uses: benjlevesque/short-sha@v1.2
        id: short-sha
        with:
          length: 7
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2.3.1
        with:
          name: libnode-${{ env.NODE_VERSION }}-${{ steps.short-sha.outputs.sha }}-linux-${{ matrix.arch }}.zip
          path: ./artifacts/host

  Windows:
    runs-on: windows-2019
    if: github.event.pull_request.draft == false
    strategy:
      matrix:
        arch: [x64]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install deps
        run: choco install nasm
      - name: Download Node.js tarball
        run: curl -O https://nodejs.org/dist/${{ env.NODE_VERSION }}/node-${{ env.NODE_VERSION }}.tar.gz
      - name: Extract Node.js tarball
        run: |
          tar -zxf ./node-${{ env.NODE_VERSION }}.tar.gz -C ./
          mv node-${{ env.NODE_VERSION }} node
          rm ./node-${{ env.NODE_VERSION }}.tar.gz
      - name: Apply build patch for Windows
        working-directory: ./node
        run: patch --silent -p1 -i ../patches.windows/dll.patch
      - name: Apply common patches
        run: ./scripts/patch.sh apply -f
      # - name: Checkout build cache
      #   uses: actions/cache@v2
      #   with:
      #     path: ./node/out
      #     key: node-out-${{ runner.os }}-${{ env.NODE_VERSION }}-${{ matrix.arch }}-${{ env.CACHE_VERSION }}
      - name: Build Node.js
        working-directory: ./node
        run: ./vcbuild.bat release dll package
      - uses: benjlevesque/short-sha@v1.2
        id: short-sha
        with:
          length: 7
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2.3.1
        with:
          name: libnode-${{ env.NODE_VERSION }}-${{ steps.short-sha.outputs.sha }}-windows-${{ matrix.arch }}.zip
          path: ./node/out/Release/node-${{ env.NODE_VERSION }}-win-${{ matrix.arch }}
