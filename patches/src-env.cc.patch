diff --git a/src/env.cc b/src/env.cc
index e3e06598a5..0d03ba01d6 100644
--- a/src/env.cc
+++ b/src/env.cc
@@ -27,6 +27,11 @@
 #include <iostream>
 #include <limits>
 #include <memory>
+#include <iostream>
+#include <limits.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include "node_file-inl.h"
 
 namespace node {
 
@@ -57,6 +62,7 @@ using v8::TryCatch;
 using v8::Undefined;
 using v8::Value;
 using worker::Worker;
+using fs::VirtualFileSystem;
 
 int const Environment::kNodeContextTag = 0x6e6f64;
 void* const Environment::kNodeContextTagPtr = const_cast<void*>(
@@ -303,14 +309,18 @@ void Environment::CreateProperties() {
   set_process_object(process_object);
 }
 
-std::string GetExecPath(const std::vector<std::string>& argv) {
-  char exec_path_buf[2 * PATH_MAX];
-  size_t exec_path_len = sizeof(exec_path_buf);
+std::string GetExecPath(const std::vector <std::string> &argv, EnvironmentFlags::Flags flags) {
   std::string exec_path;
-  if (uv_exepath(exec_path_buf, &exec_path_len) == 0) {
-    exec_path = std::string(exec_path_buf, exec_path_len);
-  } else {
+  if (flags & EnvironmentFlags::kOwnsEmbedded && argv.size() > 0) {
     exec_path = argv[0];
+  } else {
+    char exec_path_buf[2 * PATH_MAX];
+    size_t exec_path_len = sizeof(exec_path_buf);
+    if (uv_exepath(exec_path_buf, &exec_path_len) == 0) {
+      exec_path = std::string(exec_path_buf, exec_path_len);
+    } else {
+      exec_path = argv[0];
+    }
   }
 
   // On OpenBSD process.execPath will be relative unless we
@@ -344,7 +354,7 @@ Environment::Environment(IsolateData* isolate_data,
       timer_base_(uv_now(isolate_data->event_loop())),
       exec_argv_(exec_args),
       argv_(args),
-      exec_path_(GetExecPath(args)),
+      exec_path_(GetExecPath(args, flags)),
       should_abort_on_uncaught_toggle_(
           isolate_,
           1,
@@ -374,12 +384,32 @@ Environment::Environment(IsolateData* isolate_data,
   // resolved.
   enabled_debug_list_.Parse(this);
 
-  // We create new copies of the per-Environment option sets, so that it is
-  // easier to modify them after Environment creation. The defaults are
-  // part of the per-Isolate option set, for which in turn the defaults are
-  // part of the per-process option set.
-  options_ = std::make_shared<EnvironmentOptions>(
-      *isolate_data->options()->per_env);
+  if (flags_ & EnvironmentFlags::kOwnsEmbedded) {
+    std::vector <std::string> exec_args;
+    std::vector <std::string> v8_args;
+    std::vector <std::string> errors;
+    PerProcessOptions *options = new PerProcessOptions();
+    // copy static env options to isolate env options
+    memcpy(options->per_isolate->per_env.get(),
+           isolate_data->options()->per_env.get(),
+           sizeof(EnvironmentOptions));
+    options_parser::Parse(
+            &argv_,
+            &exec_argv_,
+            &v8_args,
+            options,
+            kDisallowedInEnvironment,
+            &errors);
+    options_ = std::make_shared<EnvironmentOptions>(*options->per_isolate->per_env);
+  } else {
+    // We create new copies of the per-Environment option sets, so that it is
+    // easier to modify them after Environment creation. The defaults are
+    // part of the per-Isolate option set, for which in turn the defaults are
+    // part of the per-process option set.
+    options_ = std::make_shared<EnvironmentOptions>(
+        *isolate_data->options()->per_env);
+  }
+  vfs_ = new VirtualFileSystem();
   inspector_host_port_ = std::make_shared<ExclusiveAccess<HostPort>>(
       options_->debug_options().host_port);
 
